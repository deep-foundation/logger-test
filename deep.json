{
  "package": {
    "name": "@deep-foundation/logger-test",
    "version": "1.0.0"
  },
  "data": [
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Type"
      },
      "id": 1
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "SyncTextFile"
      },
      "id": 2
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "Handler"
      },
      "id": 3
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "dockerSupportsJs"
      },
      "id": 4
    },
    {
      "package": {
        "dependencyId": 0,
        "containValue": "HandleInsert"
      },
      "id": 5
    },
    {
      "id": "Test",
      "type": 1
    },
    {
      "id": "TestInsertHandlerCode",
      "type": 2,
      "value": {
        "value": "async ({ require, deep: packageDeep, data: { triggeredByLinkId } }) => {\n  const { assert } = require('chai');\n  const { DeepClient } = require('@deep-foundation/deeplinks/imports/client');\n  const util = require('util');\n  const depthForConsoleLogs = 10;\n\n  console.log({packageDeep})\n  console.log(`Logging in as ${triggeredByLinkId}`);\n  const userDeepLoginResult = await packageDeep.login({\n    linkId: triggeredByLinkId,\n  });\n  const userDeep = new DeepClient({\n    deep: packageDeep,\n    ...userDeepLoginResult,\n  });\n  console.log(`userDeep.linkId: ${userDeep.linkId}`);\n  console.log({userDeep})\n\n  const testTypeName = 'MyType';\n  const typeOfValueOfTestType = 'String';\n  const valueForTestLink = 'ValueForTestLink';\n\n  console.log('Getting link ids by using awapt userDeep.id');\n  const containTypeLinkId = await userDeep.id(\n    '@deep-foundation/core',\n    'Contain'\n  );\n  const valueTypeLinkId = await userDeep.id('@deep-foundation/core', 'Value');\n  const stringTypeLinkId = await userDeep.id('@deep-foundation/core', 'String');\n  const handleInsertTypeLinkId = await userDeep.id(\n    '@deep-foundation/core',\n    'HandleInsert'\n  );\n  const handleUpdateTypeLinkId = await userDeep.id(\n    '@deep-foundation/core',\n    'HandleUpdate'\n  );\n  const handleDeleteTypeLinkId = await userDeep.id(\n    '@deep-foundation/core',\n    'HandleDelete'\n  );\n  const logInsertTypeLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'LogInsert'\n  );\n  const logUpdateTypeLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'LogUpdate'\n  );\n  const logDeleteTypeLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'LogDelete'\n  );\n  const insertHandlerLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'InsertHandler'\n  );\n  const updateHandlerLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'UpdateHandler'\n  );\n  const deleteHandlerLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'DeleteHandler'\n  );\n  const logIdTypeLinkId = await userDeep.id('@deep-foundation/logger', 'LogId');\n  const logTypeLinkId = await userDeep.id('@deep-foundation/logger', 'LogType');\n  const logFromTypeLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'LogFrom'\n  );\n  const logToTypeLinkId = await userDeep.id('@deep-foundation/logger', 'LogTo');\n  const logStringLinkId = await userDeep.id(\n    '@deep-foundation/logger',\n    'LogString'\n  );\n  const typeTypeLinkId = await userDeep.id('@deep-foundation/core', 'Type');\n  const anyTypeLinkId = await userDeep.id('@deep-foundation/core', 'Any');\n\n  const reservedLinkIds = await userDeep.reserve(10);\n  console.log({ reservedLinkIds });\n  const testTypeLinkId = reservedLinkIds.pop();\n  console.log({ testTypeLinkId });\n  const testTypeContainLinkId = reservedLinkIds.pop();\n  console.log({ testTypeContainLinkId });\n  const typeOfValueOfTestTypeLinkId = reservedLinkIds.pop();\n  console.log({ typeOfValueOfTestTypeLinkId });\n  const handleInsertLinkId = reservedLinkIds.pop();\n  console.log({ handleInsertLinkId });\n  const handleUpdateLinkId = reservedLinkIds.pop();\n  console.log({ handleUpdateLinkId });\n  const handleDeleteLinkId = reservedLinkIds.pop();\n  console.log({ handleDeleteLinkId });\n  const testLinkId = reservedLinkIds.pop();\n  console.log({ testLinkId });\n\n  const testTypeInsertSerialOperations =\n    await getTestTypeInsertSerialOperations({\n      testTypeLinkId,\n      typeTypeLinkId,\n      anyTypeLinkId,\n      containTypeLinkId,\n      triggeredByLinkId,\n      testTypeName,\n      containLinkId: testTypeContainLinkId\n    });\n  console.log({ testTypeInsertSerialOperations });\n  const handleInsertInsertSerialOperations =\n    await getHandleInsertInsertSerialOperations({\n      testTypeLinkId,\n      containTypeLinkId,\n      triggeredByLinkId,\n    });\n  console.log({ handleInsertInsertSerialOperations });\n  const handleUpdateInsertSerialOperations =\n    await getHandleUpdateInsertSerialOperations({\n      testTypeLinkId,\n      containTypeLinkId,\n      triggeredByLinkId,\n    });\n  console.log({ handleUpdateInsertSerialOperations });\n  const handleDeleteInsertSerialOperations =\n    await getHandleDeleteInsertSerialOperations({\n      testTypeLinkId,\n      containTypeLinkId,\n      triggeredByLinkId,\n    });\n  console.log({ handleDeleteInsertSerialOperations });\n  const testLinkInsertSerialOperations =\n    await getTestLinkInsertSerialOperations({\n      testLinkId,\n      testTypeLinkId,\n      containTypeLinkId,\n      triggeredByLinkId,\n    });\n  const stringValueLinkOfTestLinkInsertSerialOperations =\n    await getStringValueOfTestLinkInsertSerialOperations({\n      testLinkId,\n      valueForTestLink,\n    });\n  const testLinkDeleteSerialOperations =\n    await getTestLinkDeleteSerialOperations({\n      testLinkId,\n    });\n\n  const serialOperations = [\n    ...testTypeInsertSerialOperations,\n    ...handleInsertInsertSerialOperations,\n    ...handleUpdateInsertSerialOperations,\n    ...handleDeleteInsertSerialOperations,\n    ...testLinkInsertSerialOperations,\n    ...stringValueLinkOfTestLinkInsertSerialOperations,\n    ...testLinkDeleteSerialOperations,\n  ];\n  console.log(util.inspect(serialOperations, {depth: depthForConsoleLogs}));\n\n  const { data: serialResultData } = await userDeep.serial({\n    operations: serialOperations,\n  });\n  console.log({ serialResultData });\n\n  const logTreeLinks = await getLogTreeLinks({ deep: userDeep, testLinkId });\n\n  {\n    console.log(`Testing LogInsert`)\n    const logInsertLink = logTreeLinks.find(\n      (link) => link.type_id === logInsertTypeLinkId\n    );\n    console.log({ logInsertLink });\n    assert.notEqual(undefined, logInsertLink, 'LogInsert link not found');\n    const logIdLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logIdTypeLinkId &&\n        link.from_id === logInsertLink.id &&\n        link.to_id === testLinkId\n    );\n    console.log({ logIdLink });\n    assert.notEqual(undefined, logIdLink, 'LogId link not found');\n    const logTypeLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logTypeLinkId &&\n        link.from_id === logInsertLink.id &&\n        link.to_id === testTypeLinkId\n    );\n    console.log({ logTypeLink });\n    assert.notEqual(undefined, logTypeLink, 'LogType link not found');\n    const logFromLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logFromTypeLinkId &&\n        link.from_id === logInsertLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logFromLink });\n    assert.notEqual(undefined, logFromLink, 'LogFrom link not found');\n    const logToLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logToTypeLinkId &&\n        link.from_id === logInsertLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logToLink });\n    assert.notEqual(undefined, logToLink, 'LogTo link not found');\n  }\n\n  {\n    console.log(`Testing LogUpdate`)\n    const logUpdateLink = logTreeLinks.find(\n      (link) => link.type_id === logUpdateTypeLinkId\n    );\n    console.log({ logUpdateLink });\n    assert.notEqual(undefined, logUpdateLink, 'LogUpdate link not found');\n    const logIdLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logIdTypeLinkId &&\n        link.from_id === logUpdateLink.id &&\n        link.to_id === testLinkId\n    );\n    console.log({ logIdLink });\n    assert.notEqual(undefined, logIdLink, 'LogId link not found');\n    const logTypeLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logTypeLinkId &&\n        link.from_id === logUpdateLink.id &&\n        link.to_id === testTypeLinkId\n    );\n    console.log({ logTypeLink });\n    assert.notEqual(undefined, logTypeLink, 'LogType link not found');\n    const logFromLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logFromTypeLinkId &&\n        link.from_id === logUpdateLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logFromLink });\n    assert.notEqual(undefined, logFromLink, 'LogFrom link not found');\n    const logToLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logToTypeLinkId &&\n        link.from_id === logUpdateLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logToLink });\n    assert.notEqual(undefined, logToLink, 'LogTo link not found');\n    const logStringLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logStringLinkId &&\n        link.from_id === logUpdateLink.id &&\n        link.to_id === logUpdateLink.id\n    );\n    console.log({ logStringLink });\n    assert.notEqual(undefined, logStringLink, 'LogString link not found');\n  }\n\n  {\n    console.log(`Testing LogDelete`)\n    const logDeleteLink = logTreeLinks.find(\n      (link) => link.type_id === logDeleteTypeLinkId\n    );\n    console.log({ logDeleteLink });\n    assert.notEqual(undefined, logDeleteLink, 'LogDelete link not found');\n    const logIdLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logIdTypeLinkId &&\n        link.from_id === logDeleteLink.id &&\n        link.to_id === testLinkId\n    );\n    console.log({ logIdLink });\n    assert.notEqual(undefined, logIdLink, 'LogId link not found');\n    const logTypeLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logTypeLinkId &&\n        link.from_id === logDeleteLink.id &&\n        link.to_id === testTypeLinkId\n    );\n    console.log({ logTypeLink });\n    assert.notEqual(undefined, logTypeLink, 'LogType link not found');\n    const logFromLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logFromTypeLinkId &&\n        link.from_id === logDeleteLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logFromLink });\n    assert.notEqual(undefined, logFromLink, 'LogFrom link not found');\n    const logToLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logToTypeLinkId &&\n        link.from_id === logDeleteLink.id &&\n        link.to_id === triggeredByLinkId\n    );\n    console.log({ logToLink });\n    assert.notEqual(undefined, logToLink, 'LogTo link not found');\n    const logStringLink = logTreeLinks.find(\n      (link) =>\n        link.type_id === logStringLinkId &&\n        link.from_id === logDeleteLink.id &&\n        link.to_id === logDeleteLink.id\n    );\n    console.log({ logStringLink });\n    assert.notEqual(undefined, logStringLink, 'LogString link not found');\n  }\n\n  async function getLogTreeLinks({ deep, testLinkId }) {\n    const selectData = {\n      up: {\n        tree_id: {\n          _id: ['@deep-foundation/logger', 'LogTree'],\n        },\n        parent: {\n          out: {\n            type_id: {\n              _id: ['@deep-foundation/logger', 'LogId'],\n            },\n            to_id: testLinkId,\n          },\n        },\n      },\n    };\n    console.log(\n      `getLogTreeLinks: selectData: ${JSON.stringify(selectData, null, 2)}`\n    );\n    const { data: logTreeLinks } = await userDeep.select(selectData);\n    console.log({ logTreeLinks });\n    assert.isTrue(logTreeLinks.length > 0, 'LogTree links are not found');\n    return logTreeLinks;\n  }\n\n  async function getTestTypeInsertSerialOperations({\n    testTypeLinkId,\n    typeTypeLinkId,\n    anyTypeLinkId,\n    containTypeLinkId,\n    containLinkId,\n    triggeredByLinkId,\n    testTypeName,\n  }) {\n    return [\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          id: testTypeLinkId,\n          type_id: typeTypeLinkId,\n          from_id: anyTypeLinkId,\n          to_id: anyTypeLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          id: containLinkId,\n          type_id: containTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: testTypeLinkId,\n        },\n      },\n      {\n        table: 'strings',\n        type: 'insert',\n        objects: {\n          link_id: containLinkId,\n          value: testTypeName,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: valueTypeLinkId,\n          from_id: testTypeLinkId,\n          to_id: stringTypeLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: containTypeLinkId,\n          from_id: testTypeLinkId,\n          to_id: typeOfValueOfTestTypeLinkId,\n        },\n      },\n      {\n        table: 'strings',\n        type: 'insert',\n        objects: {\n          link_id: typeOfValueOfTestTypeLinkId,\n          value: typeOfValueOfTestType,\n        },\n      },\n    ];\n  }\n\n  async function getHandleInsertInsertSerialOperations({\n    testTypeLinkId,\n    containTypeLinkId,\n    triggeredByLinkId,\n  }) {\n    return [\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: handleInsertTypeLinkId,\n          from_id: testTypeLinkId,\n          to_id: insertHandlerLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: containTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: handleInsertLinkId,\n        },\n      },\n    ];\n  }\n\n  async function getHandleUpdateInsertSerialOperations({\n    testTypeLinkId,\n    containTypeLinkId,\n    triggeredByLinkId,\n  }) {\n    return [\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: handleUpdateTypeLinkId,\n          from_id: testTypeLinkId,\n          to_id: updateHandlerLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: containTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: handleUpdateLinkId,\n        },\n      },\n    ];\n  }\n\n  async function getHandleDeleteInsertSerialOperations({\n    testTypeLinkId,\n    containTypeLinkId,\n    triggeredByLinkId,\n  }) {\n    return [\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: handleDeleteTypeLinkId,\n          from_id: testTypeLinkId,\n          to_id: deleteHandlerLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: containTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: handleDeleteLinkId,\n        },\n      },\n    ];\n  }\n\n  async function getTestLinkInsertSerialOperations({\n    testLinkId,\n    testTypeLinkId,\n    containTypeLinkId,\n    triggeredByLinkId,\n  }) {\n    return [\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          id: testLinkId,\n          type_id: testTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: triggeredByLinkId,\n        },\n      },\n      {\n        table: 'links',\n        type: 'insert',\n        objects: {\n          type_id: containTypeLinkId,\n          from_id: triggeredByLinkId,\n          to_id: testLinkId,\n        },\n      },\n    ];\n  }\n\n  async function getTestLinkDeleteSerialOperations({ testLinkId }) {\n    return [\n      {\n        table: 'links',\n        type: 'delete',\n        exp: {\n          id: testLinkId,\n        },\n      },\n    ];\n  }\n\n  async function getStringValueOfTestLinkInsertSerialOperations({\n    testLinkId,\n    valueForTestLink,\n  }) {\n    return [\n      {\n        table: 'strings',\n        type: 'insert',\n        objects: {\n          link_id: testLinkId,\n          value: valueForTestLink,\n        },\n      },\n    ];\n  }\n};\n"
      }
    },
    {
      "id": "TestInsertHandler",
      "type": 3,
      "from": 4,
      "to": "TestInsertHandlerCode"
    },
    {
      "id": "HandleTestInsert",
      "type": 5,
      "from": "Test",
      "to": "TestInsertHandler"
    }
  ],
  "errors": [],
  "dependencies": [
    {
      "name": "@deep-foundation/core",
      "version": "0.0.2"
    }
  ]
}